!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
JHASH_INITVAL	hash.h	46;"	d
MCACHE_ENTRY_MASK	monitor_cache.h	16;"	d
MCACHE_ENTRY_SIZE	monitor_cache.h	15;"	d
_HASH_H_	hash.h	8;"	d
__JFIND_DOMAIN_CACHE_H__	domain_cache.h	2;"	d
__JFIND_MONITOR_CACHE_H__	monitor_cache.h	2;"	d
__jhash_final	hash.h	34;"	d
__jhash_mix	hash.h	23;"	d
add_domain_cache	domain_cache.c	/^int add_domain_cache(struct jmonitor_cache* jmt, void* data)$/;"	f
add_monitor_cache	monitor_cache.c	/^int add_monitor_cache(struct jmonitor_cache* jmt, void* data)$/;"	f
cache	monitor_cache.h	/^	struct jcache *cache;$/;"	m	struct:jentry	typeref:struct:jentry::jcache
cache_cmp	monitor_cache.h	/^	int (*cache_cmp)(void*, void*);$/;"	m	struct:jmonitor_cache
cache_copy	monitor_cache.h	/^	int (*cache_copy)(void *, void *);$/;"	m	struct:jmonitor_cache
cache_dup	monitor_cache.h	/^	void* (*cache_dup)(void*);$/;"	m	struct:jmonitor_cache
cache_free	monitor_cache.h	/^	void (*cache_free)(void*);$/;"	m	struct:jmonitor_cache
cache_print	monitor_cache.h	/^	void (*cache_print)(void*);$/;"	m	struct:jmonitor_cache
data	monitor_cache.h	/^	void* data;$/;"	m	struct:jcache
domain	domain_cache.h	/^	char 	domain[255];$/;"	m	struct:jdomaindata
domain_cmp	domain_cache.c	/^int domain_cmp(void *node, void *cache)$/;"	f
domain_copy	domain_cache.c	/^int domain_copy(void *node, void *cache)$/;"	f
domain_dup	domain_cache.c	/^void* domain_dup(void* src)$/;"	f
domain_free	domain_cache.c	/^void domain_free(void *data)$/;"	f
domain_hashcode	domain_cache.c	/^int domain_hashcode(void* node)$/;"	f
domain_print	domain_cache.c	/^void domain_print(void* data)$/;"	f
find_domain_cache	domain_cache.c	/^struct jdomaindata* find_domain_cache(struct jmonitor_cache *jmt, char *domain)$/;"	f
free_domain_cache	domain_cache.c	/^void free_domain_cache(struct jmonitor_cache* jmt)$/;"	f
free_monitor_cache	monitor_cache.c	/^void free_monitor_cache(struct jmonitor_cache* jmt)$/;"	f
hashcode	monitor_cache.h	/^	int (*hashcode)(void*);$/;"	m	struct:jmonitor_cache
init_domain_cache	domain_cache.c	/^struct jmonitor_cache* init_domain_cache()$/;"	f
init_monitor_cache	monitor_cache.c	/^struct jmonitor_cache* init_monitor_cache()$/;"	f
jcache	monitor_cache.h	/^struct jcache {$/;"	s
jdomaindata	domain_cache.h	/^struct jdomaindata {$/;"	s
jentry	monitor_cache.h	/^struct jentry {$/;"	s
jhash	hash.h	/^static inline u32 jhash(const void *key, u32 length, u32 initval)$/;"	f
jhash2	hash.h	/^static inline u32 jhash2(const u32 *k, u32 length, u32 initval)$/;"	f
jhash_1word	hash.h	/^static inline u32 jhash_1word(u32 a, u32 initval)$/;"	f
jhash_2words	hash.h	/^static inline u32 jhash_2words(u32 a, u32 b, u32 initval)$/;"	f
jhash_3words	hash.h	/^static inline u32 jhash_3words(u32 a, u32 b, u32 c, u32 initval)$/;"	f
jhash_mask	hash.h	20;"	d
jhash_size	hash.h	18;"	d
jmonitor_cache	monitor_cache.h	/^struct jmonitor_cache {$/;"	s
monitor	monitor_cache.h	/^	struct jentry monitor[MCACHE_ENTRY_SIZE];$/;"	m	struct:jmonitor_cache	typeref:struct:jmonitor_cache::jentry
mutex	monitor_cache.h	/^	pthread_mutex_t mutex;$/;"	m	struct:jentry
next	monitor_cache.h	/^	struct jcache* next;$/;"	m	struct:jcache	typeref:struct:jcache::jcache
rol32	hash.h	/^static inline u32 rol32(u32 word, unsigned int shift)$/;"	f
show_domain_cache	domain_cache.c	/^void show_domain_cache(struct jmonitor_cache* jmt)$/;"	f
show_monitor_cache	monitor_cache.c	/^void show_monitor_cache(struct jmonitor_cache* jmt)$/;"	f
status	domain_cache.h	/^	int 	status;$/;"	m	struct:jdomaindata
str_hash_131	hash.h	/^static inline u32 str_hash_131(const char *str) {$/;"	f
str_hash_31	hash.h	/^static inline u32 str_hash_31(const char *str) {$/;"	f
